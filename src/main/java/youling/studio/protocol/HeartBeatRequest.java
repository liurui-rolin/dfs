/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package youling.studio.protocol;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class HeartBeatRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8894580375622372188L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HeartBeatRequest\",\"namespace\":\"youling.studio.protocol\",\"fields\":[{\"name\":\"worder_id\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"port\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<HeartBeatRequest> ENCODER =
      new BinaryMessageEncoder<HeartBeatRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<HeartBeatRequest> DECODER =
      new BinaryMessageDecoder<HeartBeatRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<HeartBeatRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<HeartBeatRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<HeartBeatRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this HeartBeatRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a HeartBeatRequest from a ByteBuffer. */
  public static HeartBeatRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence worder_id;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public int port;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public HeartBeatRequest() {}

  /**
   * All-args constructor.
   * @param worder_id The new value for worder_id
   * @param host The new value for host
   * @param port The new value for port
   */
  public HeartBeatRequest(java.lang.CharSequence worder_id, java.lang.CharSequence host, java.lang.Integer port) {
    this.worder_id = worder_id;
    this.host = host;
    this.port = port;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return worder_id;
    case 1: return host;
    case 2: return port;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: worder_id = (java.lang.CharSequence)value$; break;
    case 1: host = (java.lang.CharSequence)value$; break;
    case 2: port = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'worder_id' field.
   * @return The value of the 'worder_id' field.
   */
  public java.lang.CharSequence getWorderId() {
    return worder_id;
  }

  /**
   * Sets the value of the 'worder_id' field.
   * @param value the value to set.
   */
  public void setWorderId(java.lang.CharSequence value) {
    this.worder_id = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return The value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'port' field.
   * @return The value of the 'port' field.
   */
  public java.lang.Integer getPort() {
    return port;
  }

  /**
   * Sets the value of the 'port' field.
   * @param value the value to set.
   */
  public void setPort(java.lang.Integer value) {
    this.port = value;
  }

  /**
   * Creates a new HeartBeatRequest RecordBuilder.
   * @return A new HeartBeatRequest RecordBuilder
   */
  public static youling.studio.protocol.HeartBeatRequest.Builder newBuilder() {
    return new youling.studio.protocol.HeartBeatRequest.Builder();
  }

  /**
   * Creates a new HeartBeatRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new HeartBeatRequest RecordBuilder
   */
  public static youling.studio.protocol.HeartBeatRequest.Builder newBuilder(youling.studio.protocol.HeartBeatRequest.Builder other) {
    return new youling.studio.protocol.HeartBeatRequest.Builder(other);
  }

  /**
   * Creates a new HeartBeatRequest RecordBuilder by copying an existing HeartBeatRequest instance.
   * @param other The existing instance to copy.
   * @return A new HeartBeatRequest RecordBuilder
   */
  public static youling.studio.protocol.HeartBeatRequest.Builder newBuilder(youling.studio.protocol.HeartBeatRequest other) {
    return new youling.studio.protocol.HeartBeatRequest.Builder(other);
  }

  /**
   * RecordBuilder for HeartBeatRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HeartBeatRequest>
    implements org.apache.avro.data.RecordBuilder<HeartBeatRequest> {

    private java.lang.CharSequence worder_id;
    private java.lang.CharSequence host;
    private int port;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(youling.studio.protocol.HeartBeatRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.worder_id)) {
        this.worder_id = data().deepCopy(fields()[0].schema(), other.worder_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing HeartBeatRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(youling.studio.protocol.HeartBeatRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.worder_id)) {
        this.worder_id = data().deepCopy(fields()[0].schema(), other.worder_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.port)) {
        this.port = data().deepCopy(fields()[2].schema(), other.port);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'worder_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getWorderId() {
      return worder_id;
    }

    /**
      * Sets the value of the 'worder_id' field.
      * @param value The value of 'worder_id'.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder setWorderId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.worder_id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'worder_id' field has been set.
      * @return True if the 'worder_id' field has been set, false otherwise.
      */
    public boolean hasWorderId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'worder_id' field.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder clearWorderId() {
      worder_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * @return The value.
      */
    public java.lang.CharSequence getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * @param value The value of 'host'.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'host' field.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'port' field.
      * @return The value.
      */
    public java.lang.Integer getPort() {
      return port;
    }

    /**
      * Sets the value of the 'port' field.
      * @param value The value of 'port'.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder setPort(int value) {
      validate(fields()[2], value);
      this.port = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'port' field has been set.
      * @return True if the 'port' field has been set, false otherwise.
      */
    public boolean hasPort() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'port' field.
      * @return This builder.
      */
    public youling.studio.protocol.HeartBeatRequest.Builder clearPort() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public HeartBeatRequest build() {
      try {
        HeartBeatRequest record = new HeartBeatRequest();
        record.worder_id = fieldSetFlags()[0] ? this.worder_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.port = fieldSetFlags()[2] ? this.port : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<HeartBeatRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<HeartBeatRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<HeartBeatRequest>
    READER$ = (org.apache.avro.io.DatumReader<HeartBeatRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
